#!/usr/bin/python
# -*- coding: utf-8 -*-

# Screenja - Efficient OSX Screenshot taking for work
# Autor: Tomas Dobrotka : tomas@dobrotka.sk | www.dobrotka.sk
# https://github.com/ggtd/Screenja

APP_NAME="Screenja"
APP_VERSION='0.05alfa'
print "Version: "+str(APP_VERSION)

SAVE_SUBDIR='Screenshots'
APP_CONFIG_DEFAULT='Screenshot'
APP_CONFIG_WINDOW_TITLE='Name screenshot'

#first do screenshot ASAP

import os
import time


TMP_IMAGE_FILENAME="/tmp/screenja_tmp.delete."+str(time.time())+".png"
os.system("screencapture  -i "+TMP_IMAGE_FILENAME)

#later do all the rest stuff

from Tkinter import *
HOME_PATH=os.getenv("HOME")

try:
    lista=os.listdir(HOME_PATH+"/Desktop/"+SAVE_SUBDIR)
except:
    os.system("mkdir ~/Desktop/"+SAVE_SUBDIR+'/')
    lista=[]

class AutocompleteEntry(Entry):
    def __init__(self, lista, *args, **kwargs):

        Entry.__init__(self, *args, **kwargs)
        self.lista = lista
        self.var = self["textvariable"]
        if self.var == '':
            self.var = self["textvariable"] = StringVar()

        self.var.trace('w', self.changed)
        self.bind("<Right>", self.selection)
        self.bind("<Up>", self.up)
        self.bind("<Down>", self.down)

        self.lb_up = False

    def changed(self, name, index, mode):

        if self.var.get() == '':
            self.lb.destroy()
            self.lb_up = False
        else:
            words = self.comparison()
            if words:
                if not self.lb_up:
                    self.lb = Listbox()
                    self.lb.bind("<Double-Button-1>", self.selection)
                    self.lb.bind("<Right>", self.selection)
                    self.lb.place(x=self.winfo_x(), y=self.winfo_y() + self.winfo_height())
                    self.lb_up = True

                self.lb.delete(0, END)
                for w in words:
                    self.lb.insert(END, w)
            else:
                if self.lb_up:
                    self.lb.destroy()
                    self.lb_up = False

    def selection(self, event):

        if self.lb_up:
            self.var.set(self.lb.get(ACTIVE))
            self.lb.destroy()
            self.lb_up = False
            self.icursor(END)

    def up(self, event):

        if self.lb_up:
            if self.lb.curselection() == ():
                index = '0'
            else:
                index = self.lb.curselection()[0]
            if index != '0':
                self.lb.selection_clear(first=index)
                index = str(int(index) - 1)
                self.lb.selection_set(first=index)
                self.lb.activate(index)

    def down(self, event):

        if self.lb_up:
            if self.lb.curselection() == ():
                index = '0'
            else:
                index = self.lb.curselection()[0]
            if index != END:
                self.lb.selection_clear(first=index)
                index = str(int(index) + 1)
                self.lb.selection_set(first=index)
                self.lb.activate(index)

    def comparison(self):
        pattern = re.compile('.*' + self.var.get() + '.*')
        return [w for w in self.lista if re.match(pattern, w)]





def doquit():
    print "exiting"
    os.system("rm "+TMP_IMAGE_FILENAME)
    quit()




def save():
    NAME_RAW=str(e.get())
    NAME=NAME_RAW.replace(' ','_')
    if NAME<>"":FOLDER=NAME
    if NAME=="": NAME='Screenshot'
    FILE_NAME=NAME+"_"+time.strftime('%Y-%m-%d_%H-%M-%S')
    print "Name: "+NAME
    print "save..."
    f = open(HOME_PATH+"/.screenja.last.screen.name", 'w')
    f.write(str(NAME_RAW))
    f.close()

    os.system("mkdir ~/Desktop/"+SAVE_SUBDIR+'/'+FOLDER+"/")
    os.system("mv "+TMP_IMAGE_FILENAME+" ~/Desktop/"+SAVE_SUBDIR+'/'+FOLDER+"/"+FILE_NAME+".png")
    quit()

master = Tk()


master.title(APP_CONFIG_WINDOW_TITLE)
master.geometry("750x450")
master.attributes("-topmost", True)
master.lift()



try:
    with open(HOME_PATH+"/.screenja.last.screen.name", "r") as f:
        IMPUT_VALUE=f.readline()
except:
    IMPUT_VALUE=APP_CONFIG_DEFAULT

b_save = Button(master, text="Save", width=10, command=save)
b_save.pack()


b_calcel = Button(master, text="Cancel", width=10,command=doquit)
b_calcel.pack()


# e = Entry(master)
e = AutocompleteEntry(lista, master)
e.pack()
e.insert(0, IMPUT_VALUE)
# e.focus_set()






from PIL import Image, ImageTk




image = Image.open(TMP_IMAGE_FILENAME)
img_width, img_height = image.size
print img_width
print img_height

new_img_width=400
new_img_height=img_height/float(img_width)
new_img_height=new_img_height*new_img_width
print new_img_height

image = image.resize((int(new_img_width),int(new_img_height)), Image.ANTIALIAS)

display = ImageTk.PhotoImage(image)

label = Label(master, image=display,height=300, width=300)
label.pack()


e.focus_set()


master.mainloop()

